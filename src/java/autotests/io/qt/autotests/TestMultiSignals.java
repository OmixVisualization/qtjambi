/****************************************************************************
**
** Copyright (C) 2009-2025 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** $BEGIN_LICENSE$
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
** 
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
** $END_LICENSE$
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************/
package io.qt.autotests;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import org.junit.Assume;
import org.junit.Test;

import io.qt.QNoSuchSignalException;
import io.qt.QtObject;
import io.qt.QtSignalEmitterInterface;
import io.qt.autotests.generated.MultiSignalTest;
import io.qt.core.QInstanceMemberSignals;
import io.qt.core.QMetaObject;
import io.qt.core.QObject;
import io.qt.core.QOperatingSystemVersion;
import io.qt.core.QStaticMemberSignals;
import io.qt.core.Qt;
import io.qt.gui.QColor;
import io.qt.widgets.QCompleter;

public class TestMultiSignals extends ApplicationInitializer {
	private static class CustomMultiQSender extends QObject{
		public final class MultiSignal extends QObject.MultiSignal{

			protected MultiSignal() {
				super();
			}
			
			public void emit(int i) {
				((Signal1<Integer>)overload(int.class)).emit(i);
			}
			
			void emit(String s) {
				QObject.emit((PrivateSignal1<String>)super.overload(String.class), s);
			}

			@Override
			public <A> QMetaObject.AbstractPrivateSignal1<A> overload(Class<A> type1) throws QNoSuchSignalException {
				return super.overload(type1);
			}
			
			public <A> QMetaObject.Connection connect(QMetaObject.Slot1<A> slot, Qt.ConnectionType... connectionType){
				return super.connect(slot, connectionType);
			}
		}
		public final MultiSignal multiSignal = new MultiSignal();
	}
	
	private static class CustomMultiSender implements QInstanceMemberSignals, QtSignalEmitterInterface {
		public final class MultiSignal extends QInstanceMemberSignals.MultiSignal{

			protected MultiSignal() {
				super(CustomMultiSender.this);
			}
			
			public void emit(int i) {
				((Signal1<Integer>)overload(int.class)).emit(i);
			}
			
			void emit(String s) {
				QInstanceMemberSignals.emit((PrivateSignal1<String>)super.overload(String.class), s);
			}

			@Override
			public <A> QMetaObject.AbstractPrivateSignal1<A> overload(Class<A> type1) throws QNoSuchSignalException {
				return super.overload(type1);
			}
			
			public <A> QMetaObject.Connection connect(QMetaObject.Slot1<A> slot, Qt.ConnectionType... connectionType){
				return super.connect(slot, connectionType);
			}
		}
		public final MultiSignal multiSignal = new MultiSignal();
	}
	
	private static class CustomStaticMultiSender {
		public static final class MultiSignal extends QStaticMemberSignals.MultiSignal{

			protected MultiSignal() {
				super();
			}
			
			public void emit(int i) {
				((QStaticMemberSignals.Signal1<Integer>)overload(int.class)).emit(i);
			}
			
			void emit(String s) {
				QStaticMemberSignals.emit((QStaticMemberSignals.PrivateSignal1<String>)super.overload(String.class), s);
			}

			@Override
			public <A> QMetaObject.AbstractPrivateSignal1<A> overload(Class<A> type1) throws QNoSuchSignalException {
				return super.overload(type1);
			}
			
			public <A> QMetaObject.Connection connect(QMetaObject.Slot1<A> slot, Qt.ConnectionType... connectionType){
				return super.connect(slot, connectionType);
			}
		}
		public static final MultiSignal multiSignal = new MultiSignal();
	}
	
	private static class SignalReceiver implements QtSignalEmitterInterface, QInstanceMemberSignals{
		public final Signal0 receive0 = new Signal0(this);
		public final Signal1<Boolean> receiveB = new Signal1<>(this);
		public final Signal1<Integer> receiveI = new Signal1<>(this);
		public final Signal1<String> receiveS = new Signal1<>(this);
		public final Signal2<Integer,String> receiveIS = new Signal2<>(this);
		public final Signal2<Boolean,Integer> receiveBI = new Signal2<>(this);
		public final Signal2<Boolean,String> receiveBS = new Signal2<>(this);
		public final Signal2<Integer,Boolean> receiveIB = new Signal2<>(this);
		public final Signal2<String,Integer> receiveSI = new Signal2<>(this);
		public final Signal3<Boolean,Integer,String> receiveBIS = new Signal3<>(this);
		
		public final Receiver receiver = new Receiver();
		{
			receive0.connect(receiver::receive0);
			receiveB.connect(receiver::receiveB);
			receiveI.connect(receiver::receiveI);
			receiveS.connect(receiver::receiveS);
			receiveIS.connect(receiver::receiveIS);
			receiveBI.connect(receiver::receiveBI);
			receiveBS.connect(receiver::receiveBS);
			receiveIB.connect(receiver::receiveIB);
			receiveSI.connect(receiver::receiveSI);
			receiveBIS.connect(receiver::receiveBIS);
		}
	}
	
	private static class SignalQReceiver extends QObject{
		public final Signal1Default1<QColor> receiveColor = new Signal1Default1<>(()->
			new QColor(Qt.GlobalColor.magenta)
		);
		public final Signal0 receive0 = new Signal0();
		public final Signal1<Boolean> receiveB = new Signal1<>();
		public final Signal1<Integer> receiveI = new Signal1<>();
		public final Signal1<String> receiveS = new Signal1<>();
		public final Signal2<Integer,String> receiveIS = new Signal2<>();
		public final Signal2<Boolean,Integer> receiveBI = new Signal2<>();
		public final Signal2<Boolean,String> receiveBS = new Signal2<>();
		public final Signal2<Integer,Boolean> receiveIB = new Signal2<>();
		public final Signal2<String,Integer> receiveSI = new Signal2<>();
		public final Signal3<Boolean,Integer,String> receiveBIS = new Signal3<>();
		
		public final Receiver receiver = new Receiver();
		{
			receive0.connect(receiver::receive0);
			receiveB.connect(receiver::receiveB);
			receiveI.connect(receiver::receiveI);
			receiveS.connect(receiver::receiveS);
			receiveIS.connect(receiver::receiveIS);
			receiveBI.connect(receiver::receiveBI);
			receiveBS.connect(receiver::receiveBS);
			receiveIB.connect(receiver::receiveIB);
			receiveSI.connect(receiver::receiveSI);
			receiveBIS.connect(receiver::receiveBIS);
		}
	}
	
    private static class Receiver{
    	boolean received;
    	String receivedS;
    	Integer receivedI;
    	Boolean receivedB;
    	
    	void receiveI(int i) {
    		receivedI = i;
    		received = true;
    	}
    	
    	void receiveIS(int i, String s) {
    		receivedS = s;
    		receivedI = i;
    		received = true;
    	}
    	
    	void receiveBI(boolean b, int i) {
    		receivedB = b;
    		receivedI = i;
    		received = true;
    	}
    	
    	void receiveBIS(boolean b, int i, String s) {
    		receivedS = s;
    		receivedB = b;
    		receivedI = i;
    		received = true;
    	}
    	
    	void receiveBS(boolean b, String s) {
    		receivedS = s;
    		receivedB = b;
    		received = true;
    	}
    	
    	void receiveIB(int i, boolean b) {
    		receivedB = b;
    		receivedI = i;
    		received = true;
    	}
    	
    	void receiveSI(String s, int i) {
    		receivedS = s;
    		receivedI = i;
    		received = true;
    	}
    	
    	void receiveS(String s) {
    		receivedS = s;
    		received = true;
    	}
    	
    	void receiveB(boolean b) {
    		receivedB = b;
    		received = true;
    	}
    	
    	void receive0() {
    		received = true;
    	}
    	
    	void reset() {
    		receivedS = null;
    		receivedI = null;
    		receivedB = null;
    		received = false;
    	}
    }
    
    @Test
    public void testCustomMultiSender_QObjectSignals(){
    	Assume.assumeFalse(QOperatingSystemVersion.current().isAnyOfType(QOperatingSystemVersion.OSType.Android));
    	CustomMultiQSender sender = new CustomMultiQSender();
//    	sender.metaObject().methods().forEach(m->System.out.println(m.cppMethodSignature()));
    	Object[] received = {null};
    	QMetaObject.Connection con;
    	con = sender.multiSignal.connect((Integer i)->{received[0] = i;});
    	assertTrue(con instanceof QtObject && con.isConnected());
    	sender.multiSignal.emit(1);
    	assertEquals(Integer.valueOf(1), received[0]);
    	con = sender.multiSignal.connect((String s)->{
    		received[0] = s;
		});
    	assertTrue(con instanceof QtObject && con.isConnected());
    	received[0] = null;
    	sender.multiSignal.emit("TEST");
    	assertEquals("TEST", received[0]);
    }
    
    @Test
    public void testCustomMultiSender_InstanceSignals(){
    	Assume.assumeFalse(QOperatingSystemVersion.current().isAnyOfType(QOperatingSystemVersion.OSType.Android));
    	CustomMultiSender sender = new CustomMultiSender();
    	Object[] received = {null};
    	QMetaObject.Connection con;
    	con = sender.multiSignal.connect((Integer i)->{received[0] = i;});
    	assertTrue(con.isConnected());
    	assertFalse(con instanceof QtObject);
    	sender.multiSignal.emit(1);
    	assertEquals(Integer.valueOf(1), received[0]);
    	con = sender.multiSignal.connect((String s)->{
    		received[0] = s;
		});
    	assertTrue(con.isConnected());
    	assertFalse(con instanceof QtObject);
    	received[0] = null;
    	sender.multiSignal.emit("TEST");
    	assertEquals("TEST", received[0]);
    }
    
    @Test
    public void testCustomMultiSender_StaticSignals(){
    	Assume.assumeFalse(QOperatingSystemVersion.current().isAnyOfType(QOperatingSystemVersion.OSType.Android));
    	Object[] received = {null};
    	QMetaObject.Connection con;
    	con = CustomStaticMultiSender.multiSignal.connect((Integer i)->{received[0] = i;});
    	assertTrue(con.isConnected());
    	assertFalse(con instanceof QtObject);
    	CustomStaticMultiSender.multiSignal.emit(1);
    	assertEquals(Integer.valueOf(1), received[0]);
    	con = CustomStaticMultiSender.multiSignal.connect((String s)->{
    		received[0] = s;
		});
    	assertTrue(con.isConnected());
    	assertFalse(con instanceof QtObject);
    	received[0] = null;
    	CustomStaticMultiSender.multiSignal.emit("TEST");
    	assertEquals("TEST", received[0]);
    }

    @Test
    public void test_emit_MultiSignal() {
    	MultiSignalTest sender = new MultiSignalTest();
    	try {
	    	Receiver receiver = new Receiver();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	
	    	QMetaObject.Connection connection = sender.multiSignal1.overload().connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	sender.emit_multiSignal1();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload().disconnect(connection));
	
	    	receiver.reset();
	    	sender.emit_multiSignal1();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	
	    	connection = sender.multiSignal1.overload(int.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	
	    	sender.emit_multiSignal1();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	
	    	sender.emit_multiSignal1(164);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class).disconnect(connection));
	
	    	connection = sender.multiSignal1.overload(int.class, String.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal1(104, "E");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class, String.class).disconnect(connection));
	    	receiver.reset();
	    	
	    	try {
				sender.multiSignal1.overload(boolean.class).connect(receiver::receive0);
				assertTrue("should throw QNoSuchSignalException", false);
			} catch (QNoSuchSignalException e) {
			}
	
	    	connection = sender.multiSignal1.overload(int.class).connect(receiver::receiveI);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal1(648);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(648), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class).disconnect(connection));
	
	    	connection = sender.multiSignal1.overload(int.class, String.class).connect(receiver::receiveI);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal1(967, "X");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(967), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class, String.class).disconnect(connection));
	
	    	connection = sender.multiSignal1.overload(int.class, String.class).connect(receiver::receiveIS);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal1(967, "Q");
	    	assertEquals("Q", receiver.receivedS);
	    	assertEquals(Integer.valueOf(967), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class, String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal1.overload().connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal1.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload().disconnect(connection));
	
	    	connection = sender.multiSignal1.overload(int.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal1.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal1.emit(9473);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class).disconnect(connection));
	
	    	connection = sender.multiSignal1.overload(int.class, String.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal1.emit(9473, "O");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class, String.class).disconnect(connection));
	    	receiver.reset();
	    	
	    	connection = sender.multiSignal1.overload(int.class).connect(receiver::receiveI);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal1.emit(648);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(648), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class).disconnect(connection));
	
	    	connection = sender.multiSignal1.overload(int.class, String.class).connect(receiver::receiveI);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal1.emit(967, "P");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(967), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class, String.class).disconnect(connection));
	
	    	connection = sender.multiSignal1.overload(int.class, String.class).connect(receiver::receiveIS);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal1.emit(967, "Q");
	    	assertEquals("Q", receiver.receivedS);
	    	assertEquals(Integer.valueOf(967), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class, String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal2.overload(String.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.overload(String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal2.overload(int.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.overload(int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal2.overload(boolean.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.overload(boolean.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal2.overload(String.class).connect(receiver::receiveS);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.overload(String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal2.overload(int.class).connect(receiver::receiveI);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(1), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.overload(int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal2.overload(boolean.class).connect(receiver::receiveB);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.overload(boolean.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal2.overload(String.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.overload(String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal2.overload(int.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.overload(int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal2.overload(boolean.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.overload(boolean.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal2.overload(String.class).connect(receiver::receiveS);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.overload(String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal2.overload(int.class).connect(receiver::receiveI);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(1), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.overload(int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal2.overload(boolean.class).connect(receiver::receiveB);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.overload(boolean.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal3.overload(int.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal3.overload(int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal3.overload(boolean.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal3.overload(boolean.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal3.overload(String.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal3.overload(String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal3.overload(int.class).connect(receiver::receiveI);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal3.overload(int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal3.overload(boolean.class).connect(receiver::receiveB);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal3.overload(boolean.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal3.overload(String.class).connect(receiver::receiveS);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal3.overload(String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal3.overload(int.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal3.overload(int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal3.overload(boolean.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal3.overload(boolean.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal3.overload(String.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal3.overload(String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal3.overload(int.class).connect(receiver::receiveI);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal3.overload(int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal3.overload(boolean.class).connect(receiver::receiveB);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal3.overload(boolean.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal3.overload(String.class).connect(receiver::receiveS);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal3.overload(String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(String.class, int.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(String.class, int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(int.class, boolean.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(int.class, boolean.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, String.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(String.class, int.class).connect(receiver::receiveS);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(String.class, int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(int.class, boolean.class).connect(receiver::receiveI);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(int.class, boolean.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, String.class).connect(receiver::receiveB);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver::receiveB);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(String.class, int.class).connect(receiver::receiveSI);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(147), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(5), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(String.class, int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(int.class, boolean.class).connect(receiver::receiveIB);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(int.class, boolean.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, String.class).connect(receiver::receiveBS);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver::receiveBI);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver::receiveBIS);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(connection));
	
	    	connection = sender.multiSignal4.overload(String.class, int.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(String.class, int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(int.class, boolean.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(int.class, boolean.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, String.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver::receive0);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(String.class, int.class).connect(receiver::receiveS);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(String.class, int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(int.class, boolean.class).connect(receiver::receiveI);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(int.class, boolean.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, String.class).connect(receiver::receiveB);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver::receiveB);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(String.class, int.class).connect(receiver::receiveSI);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(147), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(5), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(String.class, int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(int.class, boolean.class).connect(receiver::receiveIB);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(int.class, boolean.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, String.class).connect(receiver::receiveBS);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver::receiveBI);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver::receiveBIS);
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal1.overload().connect(receiver, "receive0()");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal1();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload().disconnect(receiver, "receive0()"));
	
	    	connection = sender.multiSignal1.overload(int.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	
	    	sender.emit_multiSignal1();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	
	    	sender.emit_multiSignal1(164);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class).disconnect(receiver, "receive0()"));
	
	    	connection = sender.multiSignal1.overload(int.class, String.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.emit_multiSignal1(104, "E");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class, String.class).disconnect(receiver, "receive0()"));
	    	receiver.reset();
	    	
	    	try {
				sender.multiSignal1.overload(boolean.class).connect(receiver, "receive0()");
				assertTrue("should throw QNoSuchSignalException", false);
			} catch (QNoSuchSignalException e) {
			}
	
	    	connection = sender.multiSignal1.overload(int.class).connect(receiver::receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal1(648);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(648), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class).disconnect(connection));
	
	    	connection = sender.multiSignal1.overload(int.class, String.class).connect(receiver::receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal1(967, "X");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(967), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class, String.class).disconnect(connection));
	
	    	connection = sender.multiSignal1.overload(int.class, String.class).connect(receiver, "receiveIS(int,String)");
	    	receiver.reset();
	    	sender.emit_multiSignal1(967, "Q");
	    	assertEquals("Q", receiver.receivedS);
	    	assertEquals(Integer.valueOf(967), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class, String.class).disconnect(receiver, "receiveIS(int,String)"));
	    	
	    	connection = sender.multiSignal1.overload().connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.multiSignal1.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload().disconnect(receiver, "receive0()"));
	
	    	sender.multiSignal1.overload(int.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.multiSignal1.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal1.emit(9473);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class).disconnect(receiver, "receive0()"));
	
	    	connection = sender.multiSignal1.overload(int.class, String.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.multiSignal1.emit(9473, "O");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class, String.class).disconnect(receiver, "receive0()"));
	    	receiver.reset();
	    	
	    	connection = sender.multiSignal1.overload(int.class).connect(receiver::receiveI);
	    	receiver.reset();
	    	sender.multiSignal1.emit(648);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(648), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class).disconnect(connection));
	
	    	connection = sender.multiSignal1.overload(int.class, String.class).connect(receiver::receiveI);
	    	receiver.reset();
	    	sender.multiSignal1.emit(967, "P");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(967), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class, String.class).disconnect(connection));
	
	    	sender.multiSignal1.overload(int.class, String.class).connect(receiver, "receiveIS(int,String)");
	    	receiver.reset();
	    	sender.multiSignal1.emit(967, "Q");
	    	assertEquals("Q", receiver.receivedS);
	    	assertEquals(Integer.valueOf(967), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload(int.class, String.class).disconnect(receiver, "receiveIS(int,String)"));
	    	
	    	connection = sender.multiSignal2.overload(String.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.overload(String.class).disconnect(receiver, "receive0()");
	    	
	    	connection = sender.multiSignal2.overload(int.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.overload(int.class).disconnect(receiver, "receive0()");
	    	
	    	connection = sender.multiSignal2.overload(boolean.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.overload(boolean.class).disconnect(receiver, "receive0()");
	    	
	    	connection = sender.multiSignal2.overload(String.class).connect(receiver, "receiveS(String)");
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.overload(String.class).disconnect(receiver, "receiveS(String)");
	    	
	    	connection = sender.multiSignal2.overload(int.class).connect(receiver::receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(1), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.overload(int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal2.overload(boolean.class).connect(receiver, "receiveB(boolean)");
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.overload(boolean.class).disconnect(receiver, "receiveB(boolean)");
	    	
	    	connection = sender.multiSignal2.overload(String.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.overload(String.class).disconnect(receiver, "receive0()");
	    	
	    	connection = sender.multiSignal2.overload(int.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.overload(int.class).disconnect(receiver, "receive0()");
	    	
	    	connection = sender.multiSignal2.overload(boolean.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.overload(boolean.class).disconnect(receiver, "receive0()");
	    	
	    	connection = sender.multiSignal2.overload(String.class).connect(receiver, "receiveS(String)");
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.overload(String.class).disconnect(receiver, "receiveS(String)");
	    	
	    	connection = sender.multiSignal2.overload(int.class).connect(receiver::receiveI);
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(1), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.overload(int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal2.overload(boolean.class).connect(receiver, "receiveB(boolean)");
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.overload(boolean.class).disconnect(receiver, "receiveB(boolean)");
	    	
	    	connection = sender.multiSignal3.overload(int.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.overload(int.class).disconnect(receiver, "receive0()");
	    	
	    	connection = sender.multiSignal3.overload(boolean.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.overload(boolean.class).disconnect(receiver, "receive0()");
	    	
	    	connection = sender.multiSignal3.overload(String.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal3.overload(String.class).disconnect(receiver, "receive0()");
	    	
	    	connection = sender.multiSignal3.overload(int.class).connect(receiver::receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal3.overload(int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal3.overload(boolean.class).connect(receiver, "receiveB(boolean)");
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.overload(boolean.class).disconnect(receiver, "receiveB(boolean)");
	    	
	    	connection = sender.multiSignal3.overload(String.class).connect(receiver, "receiveS(String)");
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal3.overload(String.class).disconnect(receiver, "receiveS(String)");
	    	
	    	connection = sender.multiSignal3.overload(int.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.overload(int.class).disconnect(receiver, "receive0()");
	    	
	    	connection = sender.multiSignal3.overload(boolean.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.overload(boolean.class).disconnect(receiver, "receive0()");
	    	
	    	connection = sender.multiSignal3.overload(String.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal3.overload(String.class).disconnect(receiver, "receive0()");
	    	
	    	connection = sender.multiSignal3.overload(int.class).connect(receiver::receiveI);
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal3.overload(int.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal3.overload(boolean.class).connect(receiver, "receiveB(boolean)");
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.overload(boolean.class).disconnect(receiver, "receiveB(boolean)");
	    	
	    	connection = sender.multiSignal3.overload(String.class).connect(receiver, "receiveS(String)");
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal3.overload(String.class).disconnect(receiver, "receiveS(String)");
	    	
	    	connection = sender.multiSignal4.overload(String.class, int.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(String.class, int.class).disconnect(receiver, "receive0()"));
	    	
	    	connection = sender.multiSignal4.overload(int.class, boolean.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(int.class, boolean.class).disconnect(receiver, "receive0()"));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, String.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver, "receive0()"));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver, "receive0()"));
	    	
	    	connection = sender.multiSignal4.overload(String.class, int.class).connect(receiver, "receiveS(String)");
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(String.class, int.class).disconnect(receiver, "receiveS(String)"));
	    	
	    	connection = sender.multiSignal4.overload(int.class, boolean.class).connect(receiver::receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(int.class, boolean.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, String.class).connect(receiver, "receiveB(boolean)");
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver, "receiveB(boolean)"));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver, "receiveB(boolean)");
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver, "receiveB(boolean)"));
	    	
	    	connection = sender.multiSignal4.overload(String.class, int.class).connect(receiver, "receiveSI(String,int)");
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(147), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(5), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(String.class, int.class).disconnect(receiver, "receiveSI(String,int)"));
	    	
	    	connection = sender.multiSignal4.overload(int.class, boolean.class).connect(receiver, "receiveIB(int,boolean)");
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(int.class, boolean.class).disconnect(receiver, "receiveIB(int,boolean)"));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, String.class).connect(receiver, "receiveBS(boolean,String)");
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver, "receiveBS(boolean,String)"));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver, "receiveBI(boolean,int)");
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver, "receiveBI(boolean,int)"));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver, "receiveBIS(boolean,int,String)");
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver, "receiveBIS(boolean,int,String)"));
	
	    	connection = sender.multiSignal4.overload(String.class, int.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(String.class, int.class).disconnect(receiver, "receive0()"));
	    	
	    	connection = sender.multiSignal4.overload(int.class, boolean.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(int.class, boolean.class).disconnect(receiver, "receive0()"));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, String.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver, "receive0()"));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver, "receive0()");
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver, "receive0()"));
	    	
	    	connection = sender.multiSignal4.overload(String.class, int.class).connect(receiver, "receiveS(String)");
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(String.class, int.class).disconnect(receiver, "receiveS(String)"));
	    	
	    	connection = sender.multiSignal4.overload(int.class, boolean.class).connect(receiver::receiveI);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(int.class, boolean.class).disconnect(connection));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, String.class).connect(receiver, "receiveB(boolean)");
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver, "receiveB(boolean)"));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver, "receiveB(boolean)");
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver, "receiveB(boolean)"));
	    	
	    	connection = sender.multiSignal4.overload(String.class, int.class).connect(receiver, "receiveSI(String,int)");
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(147), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(5), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(String.class, int.class).disconnect(receiver, "receiveSI(String,int)"));
	    	
	    	connection = sender.multiSignal4.overload(int.class, boolean.class).connect(receiver, "receiveIB(int,boolean)");
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(int.class, boolean.class).disconnect(receiver, "receiveIB(int,boolean)"));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, String.class).connect(receiver, "receiveBS(boolean,String)");
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, String.class).disconnect(receiver, "receiveBS(boolean,String)"));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver, "receiveBI(boolean,int)");
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver, "receiveBI(boolean,int)"));
	    	
	    	connection = sender.multiSignal4.overload(boolean.class, int.class, String.class).connect(receiver, "receiveBIS(boolean,int,String)");
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.overload(boolean.class, int.class, String.class).disconnect(receiver, "receiveBIS(boolean,int,String)"));
    	}finally {
    		sender.dispose();
    	}
    }
    
    @Test
    public void test_emit_MultiSignal_directconnect() {
    	MultiSignalTest sender = new MultiSignalTest();
    	try {
	    	Receiver receiver = new Receiver();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	
	    	QMetaObject.Connection connection;
	    	if(!QOperatingSystemVersion.current().isAnyOfType(QOperatingSystemVersion.OSType.Android)) {
		    	connection = sender.multiSignal1.connect(receiver::receiveI); 
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal1(648);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(648), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal1.disconnect(connection));
		
		    	connection = sender.multiSignal1.connect(receiver::receiveIS);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal1(967, "Q");
		    	assertEquals("Q", receiver.receivedS);
		    	assertEquals(Integer.valueOf(967), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal1.disconnect(connection));
		    	
		    	connection = sender.multiSignal1.connect(receiver::receiveI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal1.emit(648);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(648), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal1.disconnect(connection));
		
		    	connection = sender.multiSignal1.connect(receiver::receiveIS);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal1.emit(967, "Q");
		    	assertEquals("Q", receiver.receivedS);
		    	assertEquals(Integer.valueOf(967), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal1.disconnect(connection));
		    	
		    	connection = sender.multiSignal2.connect(receiver::receiveS);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal2(1);
		    	sender.emit_multiSignal2(true);
		    	sender.emit_multiSignal2("X");
		    	assertEquals("X", receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal2.disconnect(connection));
		    	
		    	connection = sender.multiSignal2.connect(receiver::receiveI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal2(1);
		    	sender.emit_multiSignal2(true);
		    	sender.emit_multiSignal2("X");
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(1), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal2.disconnect(connection));
		    	
		    	connection = sender.multiSignal2.connect(receiver::receiveB);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal2(1);
		    	sender.emit_multiSignal2(true);
		    	sender.emit_multiSignal2("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertEquals(Boolean.TRUE, receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal2.disconnect(connection));
		    	
		    	connection = sender.multiSignal2.connect(receiver::receiveS);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal2.emit(1);
		    	sender.multiSignal2.emit(true);
		    	sender.multiSignal2.emit("X");
		    	assertEquals("X", receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal2.disconnect(connection));
		    	
		    	connection = sender.multiSignal2.connect(receiver::receiveI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal2.emit(1);
		    	sender.multiSignal2.emit(true);
		    	sender.multiSignal2.emit("X");
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(1), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal2.disconnect(connection));
		    	
		    	connection = sender.multiSignal2.connect(receiver::receiveB);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal2.emit(1);
		    	sender.multiSignal2.emit(true);
		    	sender.multiSignal2.emit("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertEquals(Boolean.TRUE, receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal2.disconnect(connection));
		    	
		    	connection = sender.multiSignal3.connect(receiver::receiveI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal3();
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal3(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal3(8);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(8), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal3("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal3.disconnect(connection));
		    	
		    	connection = sender.multiSignal3.connect(receiver::receiveB);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal3();
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal3(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertEquals(Boolean.TRUE, receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal3(8);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal3("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal3.disconnect(connection));
		    	
		    	connection = sender.multiSignal3.connect(receiver::receiveS);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal3();
		    	assertEquals("TEST", receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal3(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal3(8);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal3("X");
		    	assertEquals("X", receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal3.disconnect(connection));
		    	
		    	connection = sender.multiSignal3.connect(receiver::receiveI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal3.emit();
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal3.emit(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal3.emit(8);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(8), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal3.emit("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal3.disconnect(connection));
		    	
		    	connection = sender.multiSignal3.connect(receiver::receiveB);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal3.emit();
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal3.emit(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertEquals(Boolean.TRUE, receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal3.emit(8);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal3.emit("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal3.disconnect(connection));
		    	
		    	connection = sender.multiSignal3.connect(receiver::receiveS);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal3.emit();
		    	assertEquals("TEST", receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal3.emit(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal3.emit(8);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal3.emit("X");
		    	assertEquals("X", receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal3.disconnect(connection));
		    	
		    	connection = sender.multiSignal4.connect(receiver::receiveS);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal4(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(8);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4("X");
		    	assertEquals("X", receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4("X", 5);
		    	assertEquals("X", receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(8, true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(true, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(true, 98, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal4.disconnect(connection));
		    	
		    	connection = sender.multiSignal4.connect(receiver::receiveI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal4(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(8);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(8), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4("X", 5);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(8, true);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(8), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(true, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(true, 98, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal4.disconnect(connection));
		    	
		    	connection = sender.multiSignal4.connect(receiver::receiveSI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal4(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(8);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4("X");
		    	assertEquals("X", receiver.receivedS);
		    	assertEquals(Integer.valueOf(147), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4("X", 5);
		    	assertEquals("X", receiver.receivedS);
		    	assertEquals(Integer.valueOf(5), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(8, true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(true, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(true, 98, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal4.disconnect(connection));
		    	
		    	connection = sender.multiSignal4.connect(receiver::receiveIB);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal4(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(8);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(8), receiver.receivedI);
		    	assertEquals(Boolean.TRUE, receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4("X", 5);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(8, true);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(8), receiver.receivedI);
		    	assertEquals(Boolean.TRUE, receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(true, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(true, 98, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal4.disconnect(connection));
		    	
		    	connection = sender.multiSignal4.connect(receiver::receiveBS);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal4(true);
		    	assertEquals("TEST", receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertEquals(Boolean.TRUE, receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(8);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4("X", 5);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(8, true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(true, "Z");
		    	assertEquals("Z", receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertEquals(Boolean.TRUE, receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(true, 98, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal4.disconnect(connection));
		    	
		    	connection = sender.multiSignal4.connect(receiver::receiveBI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal4(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(8);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4("X", 5);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(8, true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(true, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(true, 98, "Z");
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(98), receiver.receivedI);
		    	assertEquals(Boolean.TRUE, receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal4.disconnect(connection));
		    	
		    	connection = sender.multiSignal4.connect(receiver::receiveBIS);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal4(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(8);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4("X", 5);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(8, true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(true, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(true, 98, "Z");
		    	assertEquals("Z", receiver.receivedS);
		    	assertEquals(Integer.valueOf(98), receiver.receivedI);
		    	assertEquals(Boolean.TRUE, receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal4.disconnect(connection));
		
		    	connection = sender.multiSignal4.connect(receiver::receiveS);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal4.emit(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(8);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit("X");
		    	assertEquals("X", receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit("X", 5);
		    	assertEquals("X", receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(8, true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(true, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(true, 98, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal4.disconnect(connection));
		    	
		    	connection = sender.multiSignal4.connect(receiver::receiveI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal4.emit(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(8);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(8), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit("X", 5);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(8, true);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(8), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(true, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(true, 98, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal4.disconnect(connection));
		    	
		    	connection = sender.multiSignal4.connect(receiver::receiveSI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal4.emit(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(8);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit("X");
		    	assertEquals("X", receiver.receivedS);
		    	assertEquals(Integer.valueOf(147), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit("X", 5);
		    	assertEquals("X", receiver.receivedS);
		    	assertEquals(Integer.valueOf(5), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(8, true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(true, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(true, 98, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal4.disconnect(connection));
		    	
		    	connection = sender.multiSignal4.connect(receiver::receiveIB);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal4.emit(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(8);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(8), receiver.receivedI);
		    	assertEquals(Boolean.TRUE, receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit("X", 5);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(8, true);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(8), receiver.receivedI);
		    	assertEquals(Boolean.TRUE, receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(true, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(true, 98, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal4.disconnect(connection));
		    	
		    	connection = sender.multiSignal4.connect(receiver::receiveBS);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal4.emit(true);
		    	assertEquals("TEST", receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertEquals(Boolean.TRUE, receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(8);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit("X", 5);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(8, true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(true, "Z");
		    	assertEquals("Z", receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertEquals(Boolean.TRUE, receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(true, 98, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal4.disconnect(connection));
		    	
		    	connection = sender.multiSignal4.connect(receiver::receiveBI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal4.emit(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(8);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit("X", 5);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(8, true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(true, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(true, 98, "Z");
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(98), receiver.receivedI);
		    	assertEquals(Boolean.TRUE, receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal4.disconnect(connection));
		    	
		    	connection = sender.multiSignal4.connect(receiver::receiveBIS);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal4.emit(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(8);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit("X", 5);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(8, true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(true, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(true, 98, "Z");
		    	assertEquals("Z", receiver.receivedS);
		    	assertEquals(Integer.valueOf(98), receiver.receivedI);
		    	assertEquals(Boolean.TRUE, receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal4.disconnect(connection));
		    	
		    	connection = sender.multiSignal1.connect(receiver::receiveI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal1(648);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(648), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal1.disconnect(connection));
		    	
		    	connection = sender.multiSignal2.connect(receiver::receiveI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal2(1);
		    	sender.emit_multiSignal2(true);
		    	sender.emit_multiSignal2("X");
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(1), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal2.disconnect(connection));
		    	
		    	connection = sender.multiSignal2.connect(receiver::receiveI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal2.emit(1);
		    	sender.multiSignal2.emit(true);
		    	sender.multiSignal2.emit("X");
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(1), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal2.disconnect(connection));
		    	
		    	connection = sender.multiSignal3.connect(receiver::receiveI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal3();
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal3(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal3(8);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(8), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal3("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal3.disconnect(connection));
		    	
		    	connection = sender.multiSignal3.connect(receiver::receiveI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal3.emit();
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal3.emit(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal3.emit(8);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(8), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal3.emit("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal3.disconnect(connection));
		    	
		    	connection = sender.multiSignal4.connect(receiver::receiveI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.emit_multiSignal4(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(8);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(8), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4("X", 5);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(8, true);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(8), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(true, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.emit_multiSignal4(true, 98, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal4.disconnect(connection));
		    	
		    	connection = sender.multiSignal4.connect(receiver::receiveI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal4.emit(true);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(8);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(8), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit("X");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit("X", 5);
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(8, true);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(8), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(true, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	receiver.reset();
		    	sender.multiSignal4.emit(true, 98, "Z");
		    	assertNull(receiver.receivedS);
		    	assertNull(receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertFalse(receiver.received);
		    	assertTrue(sender.multiSignal4.disconnect(connection));
	
		    	connection = sender.multiSignal1.connect(receiver::receiveI);
		    	assertTrue(connection!=null && connection.isConnected());
		    	receiver.reset();
		    	sender.multiSignal1.emit(648);
		    	assertNull(receiver.receivedS);
		    	assertEquals(Integer.valueOf(648), receiver.receivedI);
		    	assertNull(receiver.receivedB);
		    	assertTrue(receiver.received);
		    	assertTrue(sender.multiSignal1.disconnect(connection));
	    	}
	    	
	    	connection = sender.multiSignal1.connect(receiver, "receive0()");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	
	    	sender.emit_multiSignal1();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	
	    	sender.emit_multiSignal1(164);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.disconnect(receiver, "receive0()"));
	
	    	connection = sender.multiSignal1.connect(receiver, "receiveIS(int,String)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal1(967, "Q");
	    	assertEquals("Q", receiver.receivedS);
	    	assertEquals(Integer.valueOf(967), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.disconnect(receiver, "receiveIS(int,String)"));
	    	
	    	connection = sender.multiSignal1.overload().connect(receiver, "receive0()");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal1.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.overload().disconnect(receiver, "receive0()"));
	
	    	connection = sender.multiSignal1.connect(receiver, "receiveIS(int,String)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal1.emit(967, "Q");
	    	assertEquals("Q", receiver.receivedS);
	    	assertEquals(Integer.valueOf(967), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.disconnect(receiver, "receiveIS(int,String)"));
	    	
	    	connection = sender.multiSignal2.connect(receiver, "receiveS(String)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.disconnect(receiver, "receiveS(String)"));
	    	
	    	connection = sender.multiSignal2.connect(receiver, "receiveB(boolean)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.disconnect(receiver, "receiveB(boolean)"));
	    	
	    	connection = sender.multiSignal2.connect(receiver, "receiveS(String)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.disconnect(receiver, "receiveS(String)"));
	    	
	    	connection = sender.multiSignal2.connect(receiver, "receiveB(boolean)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal2.disconnect(receiver, "receiveB(boolean)"));
	    	
	    	connection = sender.multiSignal3.connect(receiver, "receiveB(boolean)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal3.disconnect(receiver, "receiveB(boolean)"));
	    	
	    	connection = sender.multiSignal3.connect(receiver, "receiveS(String)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal3.disconnect(receiver, "receiveS(String)"));
	    	
	    	connection = sender.multiSignal3.connect(receiver, "receiveB(boolean)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal3.disconnect(receiver, "receiveB(boolean)"));
	    	
	    	connection = sender.multiSignal3.connect(receiver, "receiveS(String)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal3.disconnect(receiver, "receiveS(String)"));
	    	
	    	connection = sender.multiSignal4.connect(receiver, "receiveS(String)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.disconnect(receiver, "receiveS(String)"));
	    	
	    	connection = sender.multiSignal4.connect(receiver, "receiveSI(String,int)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(147), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(5), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.disconnect(receiver, "receiveSI(String,int)"));
	    	
	    	connection = sender.multiSignal4.connect(receiver, "receiveIB(int,boolean)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.disconnect(receiver, "receiveIB(int,boolean)"));
	    	
	    	connection = sender.multiSignal4.connect(receiver, "receiveBS(boolean,String)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.disconnect(receiver, "receiveBS(boolean,String)"));
	    	
	    	connection = sender.multiSignal4.connect(receiver, "receiveBI(boolean,int)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.disconnect(receiver, "receiveBI(boolean,int)"));
	    	
	    	connection = sender.multiSignal4.connect(receiver, "receiveBIS(boolean,int,String)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.disconnect(receiver, "receiveBIS(boolean,int,String)"));
	
	    	connection = sender.multiSignal4.connect(receiver, "receiveS(String)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.disconnect(receiver, "receiveS(String)"));
	    	
	    	connection = sender.multiSignal4.connect(receiver, "receiveSI(String,int)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(147), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(5), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.disconnect(receiver, "receiveSI(String,int)"));
	    	
	    	connection = sender.multiSignal4.connect(receiver, "receiveIB(int,boolean)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.disconnect(receiver, "receiveIB(int,boolean)"));
	    	
	    	connection = sender.multiSignal4.connect(receiver, "receiveBS(boolean,String)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	assertTrue(sender.multiSignal4.disconnect(receiver, "receiveBS(boolean,String)"));
	    	
	    	connection = sender.multiSignal4.connect(receiver, "receiveBI(boolean,int)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.disconnect(receiver, "receiveBI(boolean,int)"));
	    	
	    	connection = sender.multiSignal4.connect(receiver, "receiveBIS(boolean,int,String)");
	    	assertTrue(connection!=null && connection.isConnected());
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal4.disconnect(receiver, "receiveBIS(boolean,int,String)"));
    	}finally {
    		sender.dispose();
    	}
    }
    
    @Test
    public void test_emit_MultiSignal_directconnect_signal() {
    	MultiSignalTest sender = new MultiSignalTest();
    	SignalReceiver signalReceiver = new SignalReceiver();
    	try {
	    	Receiver receiver = signalReceiver.receiver;
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	
	    	assertTrue(sender.multiSignal1.connect(signalReceiver.receiveI)!=null);
	    	receiver.reset();
	    	sender.emit_multiSignal1(648);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(648), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.disconnect(signalReceiver.receiveI));
	
	    	sender.multiSignal1.connect(signalReceiver.receiveIS);
	    	receiver.reset();
	    	sender.emit_multiSignal1(967, "Q");
	    	assertEquals("Q", receiver.receivedS);
	    	assertEquals(Integer.valueOf(967), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal1.disconnect(signalReceiver.receiveIS);
	    	
	    	sender.multiSignal1.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.multiSignal1.emit(648);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(648), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal1.disconnect(signalReceiver.receiveI);
	
	    	sender.multiSignal1.connect(signalReceiver.receiveIS);
	    	receiver.reset();
	    	sender.multiSignal1.emit(967, "Q");
	    	assertEquals("Q", receiver.receivedS);
	    	assertEquals(Integer.valueOf(967), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal1.disconnect(signalReceiver.receiveIS);
	    	
	    	sender.multiSignal2.connect(signalReceiver.receiveS);
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.disconnect(signalReceiver.receiveS);
	    	
	    	sender.multiSignal2.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(1), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal2.connect(signalReceiver.receiveB);
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.disconnect(signalReceiver.receiveB);
	    	
	    	sender.multiSignal2.connect(signalReceiver.receiveS);
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.disconnect(signalReceiver.receiveS);
	    	
	    	sender.multiSignal2.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(1), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal2.connect(signalReceiver.receiveB);
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.disconnect(signalReceiver.receiveB);
	    	
	    	sender.multiSignal3.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal3.connect(signalReceiver.receiveB);
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.disconnect(signalReceiver.receiveB);
	    	
	    	sender.multiSignal3.connect(signalReceiver.receiveS);
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal3.disconnect(signalReceiver.receiveS);
	    	
	    	sender.multiSignal3.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal3.connect(signalReceiver.receiveB);
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.disconnect(signalReceiver.receiveB);
	    	
	    	sender.multiSignal3.connect(signalReceiver.receiveS);
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal3.disconnect(signalReceiver.receiveS);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveS);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveS);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveSI);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(147), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(5), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveSI);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveIB);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveIB);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveBS);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveBS);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveBI);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveBI);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveBIS);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveBIS);
	
	    	sender.multiSignal4.connect(signalReceiver.receiveS);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveS);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveSI);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(147), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(5), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveSI);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveIB);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveIB);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveBS);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveBS);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveBI);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveBI);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveBIS);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveBIS);
	    	
	    	
	    	sender.multiSignal1.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal1(648);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(648), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal1.disconnect(signalReceiver.receiveI);
	
	    	sender.multiSignal1.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.multiSignal1.emit(648);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(648), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal1.disconnect(signalReceiver.receiveI);
	
	    	sender.multiSignal2.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(1), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal2.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(1), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal3.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal3.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveI);
    	}finally {
    		sender.dispose();
    	}
    }
    
    @Test
    public void test_emit_MultiSignal_directconnect_signal_QObject() {
    	MultiSignalTest sender = new MultiSignalTest();
    	SignalQReceiver signalReceiver = new SignalQReceiver();
    	try {
	    	assertTrue(signalReceiver.receive0.connect(signalReceiver.receiveColor)!=null);
	    	{
	    		QColor[] colors = {null};
	    		signalReceiver.receiveColor.connect(c->colors[0]=c);
	    		signalReceiver.receive0.emit();
	    		assertEquals(new QColor(Qt.GlobalColor.magenta), colors[0]);
	    	}
	    	assertTrue(signalReceiver.receive0.disconnect(signalReceiver.receiveColor));
	    	Receiver receiver = signalReceiver.receiver;
	    	receiver.reset();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	
	    	assertTrue(sender.multiSignal1.connect(signalReceiver.receiveI)!=null);
	    	receiver.reset();
	    	sender.emit_multiSignal1(648);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(648), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	assertTrue(sender.multiSignal1.disconnect(signalReceiver.receiveI));
	
	    	sender.multiSignal1.connect(signalReceiver.receiveIS);
	    	receiver.reset();
	    	sender.emit_multiSignal1(967, "Q");
	    	assertEquals("Q", receiver.receivedS);
	    	assertEquals(Integer.valueOf(967), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal1.disconnect(signalReceiver.receiveIS);
	    	
	    	sender.multiSignal1.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.multiSignal1.emit(648);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(648), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal1.disconnect(signalReceiver.receiveI);
	
	    	sender.multiSignal1.connect(signalReceiver.receiveIS);
	    	receiver.reset();
	    	sender.multiSignal1.emit(967, "Q");
	    	assertEquals("Q", receiver.receivedS);
	    	assertEquals(Integer.valueOf(967), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal1.disconnect(signalReceiver.receiveIS);
	    	
	    	sender.multiSignal2.connect(signalReceiver.receiveS);
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.disconnect(signalReceiver.receiveS);
	    	
	    	sender.multiSignal2.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(1), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal2.connect(signalReceiver.receiveB);
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.disconnect(signalReceiver.receiveB);
	    	
	    	sender.multiSignal2.connect(signalReceiver.receiveS);
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.disconnect(signalReceiver.receiveS);
	    	
	    	sender.multiSignal2.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(1), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal2.connect(signalReceiver.receiveB);
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.disconnect(signalReceiver.receiveB);
	    	
	    	sender.multiSignal3.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal3.connect(signalReceiver.receiveB);
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.disconnect(signalReceiver.receiveB);
	    	
	    	sender.multiSignal3.connect(signalReceiver.receiveS);
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal3.disconnect(signalReceiver.receiveS);
	    	
	    	sender.multiSignal3.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal3.connect(signalReceiver.receiveB);
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.disconnect(signalReceiver.receiveB);
	    	
	    	sender.multiSignal3.connect(signalReceiver.receiveS);
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal3.disconnect(signalReceiver.receiveS);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveS);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveS);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveSI);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(147), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(5), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveSI);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveIB);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveIB);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveBS);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveBS);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveBI);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveBI);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveBIS);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveBIS);
	
	    	sender.multiSignal4.connect(signalReceiver.receiveS);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveS);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveSI);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(147), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertEquals("X", receiver.receivedS);
	    	assertEquals(Integer.valueOf(5), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveSI);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveIB);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveIB);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveBS);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertEquals("TEST", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveBS);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveBI);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveBI);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveBIS);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertEquals("Z", receiver.receivedS);
	    	assertEquals(Integer.valueOf(98), receiver.receivedI);
	    	assertEquals(Boolean.TRUE, receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveBIS);
	    	
	    	
	    	sender.multiSignal1.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal1(648);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(648), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal1.disconnect(signalReceiver.receiveI);
	
	    	sender.multiSignal1.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.multiSignal1.emit(648);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(648), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal1.disconnect(signalReceiver.receiveI);
	
	    	sender.multiSignal2.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal2(1);
	    	sender.emit_multiSignal2(true);
	    	sender.emit_multiSignal2("X");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(1), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal2.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.multiSignal2.emit(1);
	    	sender.multiSignal2.emit(true);
	    	sender.multiSignal2.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(1), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	sender.multiSignal2.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal3.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal3();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal3("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal3.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.multiSignal3.emit();
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal3.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal3.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.emit_multiSignal4(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveI);
	    	
	    	sender.multiSignal4.connect(signalReceiver.receiveI);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit("X", 5);
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(8, true);
	    	assertNull(receiver.receivedS);
	    	assertEquals(Integer.valueOf(8), receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertTrue(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	receiver.reset();
	    	sender.multiSignal4.emit(true, 98, "Z");
	    	assertNull(receiver.receivedS);
	    	assertNull(receiver.receivedI);
	    	assertNull(receiver.receivedB);
	    	assertFalse(receiver.received);
	    	sender.multiSignal4.disconnect(signalReceiver.receiveI);
    	}finally {
    		signalReceiver.dispose();
    		sender.dispose();
    	}
    }
    
    @Test
    public void testConnectToSyntheticMethods() {
    	Assume.assumeFalse(QOperatingSystemVersion.current().isAnyOfType(QOperatingSystemVersion.OSType.Android));
    	String[] result = {null};
    	QCompleter completer = new QCompleter();
    	EmbeddingClass object = new EmbeddingClass();
    	EmbeddingClass.EmbeddedClass.connect(object, completer);
    	completer.activated.connect((String text)->{
    		result[0] = text;
    		java.util.logging.Logger.getLogger("io.qt.autotests").log(java.util.logging.Level.FINE, this + completer.objectName());
    	});
    }
    
    static class EmbeddingClass extends QObject{
    	private EmbeddingClass() {}
    	static class EmbeddedClass{
    		public static void connect(EmbeddingClass object, QCompleter completer) {
    			new EmbeddingClass();
    			completer.activated.connect(object::onActivated);
    		}
    	}
    	
    	private void onActivated(String text) {
			
		}
    }

    public static void main(String args[]) {
        org.junit.runner.JUnitCore.main(TestMultiSignals.class.getName());
    }
}
